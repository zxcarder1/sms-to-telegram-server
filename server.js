// SMS to Telegram Forwarding Service
// REST API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ SMS-—Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram

const express = require('express');
const axios = require('axios');
const cors = require('cors');
const bodyParser = require('body-parser');
const rateLimit = require('express-rate-limit');
const dotenv = require('dotenv');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Express
const app = express();
const PORT = process.env.PORT || 3000;

// Middlewares
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –ó–∞—â–∏—Ç–∞ –æ—Ç DDoS - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
  message: { 
    status: 'error', 
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
  }
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç DDoS –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º /api
app.use('/api', apiLimiter);

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API-–∫–ª—é—á–∞
const checkApiKey = (req, res, next) => {
  const apiKey = req.headers['x-api-key'];
  
  // API-–∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!apiKey || apiKey !== process.env.API_KEY) {
    return res.status(401).json({ 
      status: 'error', 
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API-–∫–ª—é—á' 
    });
  }
  
  next();
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
const devices = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
const sendToTelegram = async (botToken, chatId, message) => {
  try {
    const telegramApi = `https://api.telegram.org/bot${botToken}/sendMessage`;
    
    await axios.post(telegramApi, {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    });
    
    console.log(`[${new Date().toISOString()}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`);
    return true;
  } catch (error) {
    console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:`, error.message);
    throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${error.message}`);
  }
};

// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API

// 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
app.post('/api/sendToTelegram', checkApiKey, async (req, res) => {
  try {
    const { botToken, chatId, message } = req.body;
    
    if (!botToken || !chatId || !message) {
      return res.status(400).json({ 
        status: 'error', 
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: botToken, chatId, message' 
      });
    }
    
    await sendToTelegram(botToken, chatId, message);
    
    res.json({ 
      status: 'success', 
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' 
    });
  } catch (error) {
    console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –≤ /api/sendToTelegram:`, error.message);
    res.status(500).json({ 
      status: 'error', 
      message: error.message 
    });
  }
});

// 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
app.post('/api/registerDevice', checkApiKey, (req, res) => {
  try {
    const { deviceId, botToken, chatId } = req.body;
    
    if (!deviceId || !botToken || !chatId) {
      return res.status(400).json({ 
        status: 'error', 
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: deviceId, botToken, chatId' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    const existingDeviceIndex = devices.findIndex(device => device.deviceId === deviceId);
    
    if (existingDeviceIndex !== -1) {
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      devices[existingDeviceIndex] = { deviceId, botToken, chatId };
      console.log(`[${new Date().toISOString()}] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${deviceId}`);
      
      return res.json({ 
        status: 'success', 
        message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', 
        deviceId 
      });
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    devices.push({ deviceId, botToken, chatId });
    console.log(`[${new Date().toISOString()}] –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${deviceId}`);
    
    res.json({ 
      status: 'success', 
      message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ', 
      deviceId 
    });
  } catch (error) {
    console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –≤ /api/registerDevice:`, error.message);
    res.status(500).json({ 
      status: 'error', 
      message: error.message 
    });
  }
});

// 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ SMS –∏ –∏—Ö –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ Telegram
app.post('/api/processSms', checkApiKey, async (req, res) => {
  try {
    const { deviceId, sender, message, timestamp } = req.body;
    
    if (!deviceId || !sender || !message) {
      return res.status(400).json({ 
        status: 'error', 
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: deviceId, sender, message' 
      });
    }
    
    // –ù–∞–π—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    const device = devices.find(device => device.deviceId === deviceId);
    
    if (!device) {
      return res.status(404).json({ 
        status: 'error', 
        message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ' 
      });
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    const formattedTime = timestamp 
      ? new Date(parseInt(timestamp)).toLocaleString('ru-RU') 
      : new Date().toLocaleString('ru-RU');
    
    const telegramMessage = `üì± <b>–ù–æ–≤–æ–µ SMS</b>\n\n` +
      `–û—Ç: <b>${sender}</b>\n` +
      `–í—Ä–µ–º—è: ${formattedTime}\n\n` +
      `–°–æ–æ–±—â–µ–Ω–∏–µ:\n${message}`;
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
    await sendToTelegram(device.botToken, device.chatId, telegramMessage);
    
    console.log(`[${new Date().toISOString()}] SMS –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: –æ—Ç ${sender} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceId}`);
    
    res.json({ 
      status: 'success', 
      message: 'SMS —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ Telegram' 
    });
  } catch (error) {
    console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –≤ /api/processSms:`, error.message);
    res.status(500).json({ 
      status: 'error', 
      message: error.message 
    });
  }
});

// Ping-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/ping', (req, res) => {
  res.json({ status: 'success', message: '–°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get('/', (req, res) => {
  res.json({ 
    status: 'success', 
    message: 'SMS to Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç', 
    version: '1.0.0'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res) => {
  res.status(404).json({ 
    status: 'error', 
    message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' 
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`[${new Date().toISOString()}] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
